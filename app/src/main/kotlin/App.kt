/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */

import edu.austral.dissis.chess.gui.CachedImageResolver
import edu.austral.dissis.chess.gui.DefaultImageResolver
import edu.austral.dissis.chess.gui.GameView
import edu.austral.dissis.chess.gui.SimpleGameEngine
import factory.GameFactory
import javafx.application.Application
import javafx.application.Application.launch
import javafx.scene.Scene
import javafx.stage.Stage
import model.CustomGameEngine
import model.Game
import java.util.*


fun main() {
    launch(ChessGameApplication::class.java)
}

class ChessGameApplication : Application() {
    var name : String = "Chess - "
    private val gameEngine = CustomGameEngine(chooseGameMode())
    private val imageResolver = CachedImageResolver(DefaultImageResolver())

    override fun start(primaryStage: Stage) {
        primaryStage.title = name

        val root = GameView(gameEngine, imageResolver)
        primaryStage.scene = Scene(root)

        primaryStage.show()
    }

    private fun chooseGameMode(): Game {
        val scanner = Scanner(System.`in`)
        println(
            "Enter game mode: \n 1: Classic \n 2: Capablanca \n 3: AntiPawn"
        )
        val gameMode = scanner.nextInt()
        when(gameMode){
            2 -> {
                name += "Capablanca"
                return GameFactory().createCapablancaGame()
            }
            3 -> {
                name += "AntiPawn"
                return GameFactory().createAntiPawnGame()
            }
            else -> {
                name += "Classic"
                return GameFactory().createClassicGame()
            }
        }
    }
}